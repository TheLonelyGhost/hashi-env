#!/usr/bin/env bash

source "$(dirname -- ${BASH_SOURCE[0]})/../env.sh"

# DISCLAIMER: this was adapted from https://github.com/direnv/direnv/blob/3c5d9470b89b7933587bcf68d8a556a9a9a518e8/stdlib.sh

# Usage: path_add <varname> <path> [<path> ...]
#
# Prepends the expanded <path> to the <varname> environment variable, in order.
# It prevents a common mistake where <varname> is replaced by only the new <path>,
# or where a trailing colon is left in <varname>, resulting in the current directory
# being considered in the <varname>.  Supports adding multiple directories at once.
#
# Example:
#
#    pwd
#    # output: /my/project
#    path_add PATH bin
#    echo $PATH
#    # output: /my/project/bin:/usr/bin:/bin
#    path_add PATH bam boum
#    echo $PATH
#    # output: /my/project/bam:/my/project/boum:/my/project/bin:/usr/bin:/bin
path_add() {
  local path i var_name="$1"

  # split existing paths into an array
  declare -a path_array
  if [ "$var_name" = "MANPATH" ]; then
    # If MANPATH is not empty, man will only look in MANPATH.
    # So if we set MANPATH=$path, man will only look in $path.
    # Instead, prepend to `man -w` (which outputs man's default paths).
    IFS=: read -ra path_array <<<"${!1-$(man -w)}"
  else
    IFS=: read -ra path_array <<<"${!1-}"
  fi
  shift

  # prepend the passed paths in the right order
  for ((i = $#; i > 0; i--)); do
    path_array=("$(expand_path "${!i}")" ${path_array[@]+"${path_array[@]}"})
  done

  # join back all the paths
  path=$(
    IFS=:
    echo "${path_array[*]}"
  )

  # and finally export back the result to the original variable
  export "$var_name=$path"
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  set -euo pipefail

  path_add "$@"
  printf 'export PATH=%q\n' "$PATH"
fi
