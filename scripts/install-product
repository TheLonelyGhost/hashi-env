#!/usr/bin/env bash

source "$(dirname -- ${BASH_SOURCE[0]})/../env.sh"

install_hashicorp_product() {
  local -r product="${1,,}"
  local product_versions_var="${product^^}_VERSIONS"
  product_versions_var="${product_versions_var//-/_}"
  : ${!product_versions_var:=${HASHIENV_ROOT}/versions}
  # If `product` is `terraform`, ^^^ would equate to `${TERRAFORM_VERSIONS:-${HOME}/.terraform-versions}`,
  # ensuring that the default value is actually set to something sane.
  local -r product_versions_location="${!product_versions_var}"
  # This ^^^ gives us the value of the install location base directory in a more easily used variable

  local -r version="$2"

  local -r install_dir="${product_versions_location}/${product}-v${version}"
  local GO_OS
  local GO_ARCH

  if [ ! -d "${product_versions_location}" ]; then
    mkdir -p "${product_versions_location}"
  fi

  if [ -z "$version" ]; then
    log-error "Must specify version of ${product} to install"
    return 1
  fi

  if [ -e "$install_dir" ]; then
    log-info "Found ${product} v${version} in $(user-rel-path "${product_versions_location}")"
    return 0
  fi
  log-info "$(printf 'Downloading %s (%s) to %s (from %q)\n' "${product}" "v${version}" "$(user-rel-path "${product_versions_location}")" "${product_versions_var}")"

  if uname -a 2>/dev/null | grep -qe 'Darwin' &>/dev/null; then
    GO_OS='darwin'
    GO_ARCH='amd64'
  else
    GO_OS='linux'
    case "$(uname -m)" in
      arm*|aarch*)
        if [ "$(getconf LONG_BIT)" == '64' ]; then
          GO_ARCH='arm64'
        else
          GO_ARCH='arm'
        fi
        ;;
      *)
        if [ "$(getconf LONG_BIT)" == '64' ]; then
          GO_ARCH='amd64'
        else
          GO_ARCH='386'
        fi
        ;;
    esac
  fi

  tmpdir="$(mktemp -d)"
  if ! curl -fSLo "${tmpdir}/${product}.zip" "https://releases.hashicorp.com/${product}/${version}/${product}_${version}_${GO_OS}_${GO_ARCH}.zip"; then
    log-error "Failed to download ${product} ${verison_prefix}${version}"
    return 1
  fi
  if has sha256sum && has awk && [ -z "${SKIP_CHECKSUMS:-}" ]; then
    if curl -fSLo "${tmpdir}/${product}_SHA256SUMS" "https://releases.hashicorp.com/${product}/${version}/${product}_${version}_SHA256SUMS"; then
      log-info "Checking download of ${product} against the posted checksum..."
      pushd "$tmpdir" 1>/dev/null 2>&1
      if ! awk "/_${GO_OS}_${GO_ARCH}/"' { print $1 "  " "'"${product}.zip"'" }' ./"${product}_SHA256SUMS" | sha256sum -c - 1>/dev/null; then
        log-error "Downloaded ${product}.zip does not match the posted checksum. ABORT!"
        return 1
      else
        log-info "Downloaded ${product}.zip matches the posted checksum"
      fi
      popd 1>/dev/null 2>&1
    fi
  fi
  mkdir -p "$install_dir"
  unzip -d "$install_dir" "${tmpdir}/${product}.zip"

  rm -rf "$tmpdir"
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  # We're executing this script, not sourcing it
  set -euo pipefail
  install_hashicorp_product "$@"
fi
